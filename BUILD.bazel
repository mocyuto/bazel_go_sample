load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//go:image.bzl", "go_image")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_extract")

go_binary(
    name = "hello",
    embed = [":bazel_go_sample_lib"],
    visibility = ["//visibility:public"],
)

go_library(
    name = "bazel_go_sample_lib",
    srcs = ["hello.go"],
    importpath = "github.com/mocyuto/bazel_go_sample",
    visibility = ["//visibility:private"],
    deps = ["@com_github_pborman_uuid//:uuid"],
)

# gazelle:prefix github.com/mocyuto/bazel_go_sample
gazelle(name = "gazelle")

gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_dependencies",
        "-prune",
    ],
    command = "update-repos",
)

# multi stage build
container_image(
    name = "base",
    base = "@alpine_linux_arm64//image",
)

container_run_and_extract(
    name = "extract_a1",
    commands = ["echo 'hello world' > /a1.txt"],
    extract_file = "/a1.txt",
    image = ":base.tar",
)

container_image(
    name = "multi_stage_build",
    base = "@alpine_linux_arm64//image",
    cmd = [
        "cat",
        "a1.txt",
    ],
    files = [
        "extract_a1/a1.txt",
    ],
)

# create go image
go_image(
    name = "go_image",
    srcs = ["hello.go"],
    goarch = "amd64",
    goos = "linux",
    importpath = "github.com/mocyuto/bazel_go_sample",
    visibility = ["//visibility:public"],
    deps = ["@com_github_pborman_uuid//:uuid"],
)
